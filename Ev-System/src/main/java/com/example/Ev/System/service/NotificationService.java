package com.example.Ev.System.service;

import com.example.Ev.System.entity.MaintenanceReminder;
import com.example.Ev.System.entity.ServiceAppointment;
import com.example.Ev.System.entity.User;
import com.example.Ev.System.entity.Vehicle;
import com.example.Ev.System.repository.MaintenanceReminderRepository;
import com.example.Ev.System.repository.UserRepository;
import com.example.Ev.System.repository.VehicleRepository;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.time.LocalDateTime;
import java.util.Optional;

@Service
public class NotificationService {

    private final JavaMailSender mailSender;
    private final MaintenanceReminderRepository reminderRepo;
    private final VehicleRepository vehicleRepo;
    private final UserRepository userRepo;

    @Value("${app.notifications.from:no-reply@example.com}")
    private String from;

    public NotificationService(JavaMailSender mailSender,
                               MaintenanceReminderRepository reminderRepo,
                               VehicleRepository vehicleRepo,
                               UserRepository userRepo) {
        this.mailSender = mailSender;
        this.reminderRepo = reminderRepo;
        this.vehicleRepo = vehicleRepo;
        this.userRepo = userRepo;
    }

    public void sendReminderEmail(MaintenanceReminder reminder) {
        String to = fetchEmailByVehicleId(Long.valueOf(reminder.getVehicle().getId()));
        if (to == null) {
            System.err.println("Kh√¥ng t√¨m th·∫•y email cho vehicle_id=" + reminder.getVehicle().getId());
            reminder.setIsSent(true);
            reminder.setSentAt(Instant.now());
            reminderRepo.save(reminder);
            return;
        }

        SimpleMailMessage msg = new SimpleMailMessage();
        msg.setFrom(from);
        msg.setTo(to);
        msg.setSubject("Th√¥ng b√°o b·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥");
        String body = (reminder.getMessage() != null)
                ? reminder.getMessage()
                : "Xe c·ªßa b·∫°n ƒë√£ ƒë·∫øn k·ª≥ b·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥. Vui l√≤ng ƒë·∫∑t l·ªãch h·∫πn t·∫°i trung t√¢m d·ªãch v·ª• g·∫ßn nh·∫•t.";
        msg.setText(body);

        System.out.println("üöÄ ƒêang g·ª≠i mail ƒë·∫øn: " + to);
        try {
            mailSender.send(msg);
            System.out.println("‚úÖ ƒê√£ g·ª≠i mail th√†nh c√¥ng ƒë·∫øn: " + to);
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi g·ª≠i mail: " + e.getMessage());
            e.printStackTrace();
        }

        reminder.setIsSent(true);
        reminder.setSentAt(Instant.now());
        reminderRepo.save(reminder);

        System.out.println("üì© ƒê√£ c·∫≠p nh·∫≠t reminder l√† sent cho: " + to);
    }


    private String fetchEmailByVehicleId(Long vehicleId) {
        if (vehicleId == null) return null;

        // L·∫•y vehicle theo vehicle_id
        Vehicle vehicle = vehicleRepo.findVehicleById(vehicleId.intValue());
        if (vehicle == null) return null;

        // L·∫•y user (ch·ªß xe) theo customer_id
        Integer customerId = vehicle.getCustomer().getId();
        if (customerId == null) return null;

        Optional<User> userOpt = userRepo.findById(customerId);
        return userOpt.map(User::getEmail).orElse(null);
    }

    public void sendAppointmentStatusChanged(User customer, ServiceAppointment appointment, String newStatus) {
        if (customer == null || customer.getEmail() == null) {
            System.err.println("‚ùå Kh√¥ng th·ªÉ g·ª≠i email: th√¥ng tin kh√°ch h√†ng kh√¥ng h·ª£p l·ªá.");
            return;
        }

        String to = customer.getEmail();
        String subject = "C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªãch h·∫πn d·ªãch v·ª•";
        String body = String.format(
                "Xin ch√†o %s,\n\nTr·∫°ng th√°i l·ªãch h·∫πn b·∫£o d∆∞·ª°ng c·ªßa b·∫°n (M√£: %d) ƒë√£ thay ƒë·ªïi th√†nh: %s.\n\nC·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• EV Service Center.",
                customer.getFullName(),
                appointment.getId(),
                newStatus
        );

        SimpleMailMessage msg = new SimpleMailMessage();
        msg.setFrom(from);
        msg.setTo(to);
        msg.setSubject(subject);
        msg.setText(body);

        try {
            mailSender.send(msg);
            System.out.println("‚úÖ ƒê√£ g·ª≠i email thay ƒë·ªïi tr·∫°ng th√°i cho: " + to);
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi g·ª≠i email: " + e.getMessage());
        }
    }
}
